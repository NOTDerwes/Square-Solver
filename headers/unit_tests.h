#ifndef UNIT_TESTS_H
#define UNIT_TESTS_H

#include <stdbool.h>
#include "solve_equation.h"

/*!
 * @file unit_tests.h
 * @brief Модуль тестирования решения квадратных уравнений
 * @author NOTDerwes
 * @date 25.08.2025
 * @version Beta
 *
 * Модуль предоставляет функции для тестирования решения квадратных уравнений
 */

/*!
 * @enum utest_err
 * @brief Флаги выполнения тестов
 *
 * Флаги выполнения функций, проводящих юнит-тестирование
 * функции solve_square_equation()
 */
 enum utest_err {
    TestErr = -23,   ///< Ошибка при тестировании (ошибка при вызове solve_square_equation())
    FileErr = -4,     ///< Ошибка при чтении/открытии файла с тестовыми данными (неправильный путь, файл не существует)
    Passed = 12          ///< Штатное выполнение теста
 };

/*!
 * @brief Тестирование решения одного квадратного уравнения
 *
 * Функция сравнивает корни, полученные от solve_square_equation,
 * с ожидаемыми корнями тестового уравнения.
 *
 * @param[in] test_cf Коэффициенты тестового уравнения
 * @param[in] expected Ожидаемые корни уравнения
 * @return @b true если корни совпадают с ожидаемыми
 * @return @b false если корни не совпадают или произошла ошибка
 *
 * @note Используется для тестирования отдельных уравнений
 * @see solve_square_equation
 */
bool test_one_equation(SquareEquation test_equation);

/*!
 * @brief Запуск комплексного тестирования из файла
 *
 * Функция читает тестовые данные из указанного файла, запускает тесты
 * и выводит процент корректно выполненных тестов.
 *
 * @param[in] path Путь к файлу с тестовыми данными
 *
 * @details Формат тестового файла должен содержать:
 * - Коэффициенты a, b, c
 * - Ожидаемые корни x1, x2
 * - Ожидаемое количество корней
 * - Каждый тест вводится в формате a b c | roots_amount x1 x2
 * @remark Ввод x1 и x2 зависит от roots_amount (см. пример и Roots)
 *
 * @warning Файл должен существовать и быть доступен для чтения
 * @note Выводит подробную информацию об ошибках в консоль
 *
 * Пример формата файла:
 * @code
 * 1 -3 2 | 2 1 2   # Уравнение @f$ x^2 - 3x + 2 = 0 @f$, 2 корня: 1 и 2
 * 1 2 1 | 1 -1   # Уравнение @f$ x^2 + 2x + 1 = 0 @f$, 1 корень: -1
 * 1 2 3 | 0    # Уравнение @f$ x^2 + 2x + 3 = 0 @f$, 0 корней (корни отсутствуют)
 * 0 0 0 | -1   # Уравнение @f$ 0x^2 + 0x + 0 = 0 @f$, -1 корней (бесконечное кол-во, см. Roots)
 * @endcode
 * @see Coeffs, Roots
 */
int test_solve_equation(char path[]);

/*!
 * @brief Функция test_solve_equation с другим форматом ввода
 *
 * Функция выполняет тот же набор команд, что и test_solve_equation,
 * но преобразует входной файл в буфер и читает данные из него.
 *
 * @note При тестировании эта функция не используется
 *
 * @see test_solve_equation
*/
int test_with_dyn_arr(char path[]);

#endif
